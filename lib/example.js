module.exports = 'var domify = require(\'domify\');\nvar Prism = require(\'../vendor/prism\');\n\nvar langClass = \'language-javascript\';\n\n/**\n * @param {string} code\n * @return {string} html\n */\nfunction highlight(code) {\n  var preEl = domify(\n    \'<pre class="\' + langClass +\'">\' +\n      \'<code class="\' +langClass +\'"></code>\' +\n    \'</pre>\'\n  );\n  var codeEl = preEl.childNodes[0];\n  codeEl.textContent = code;\n\n  Prism.highlightElement(codeEl, false);\n\n  return codeEl.innerHTML;\n}\n\nfunction parentByClass(el, kls) {\n  while (el.parentNode) {\n    if (el.parentNode.classList.contains(kls)) {\n      return el.parentNode;\n    } else {\n      el = el.parentNode;\n    }\n  }\n  return null;\n}\n\n/**\n * Add node types as classes to their corresponding elements in the DOM.\n * @param {array<ASTNode>} path\n * @param {object} colElsMap\n */\nfunction annotate(path, colElsMap) {\n for (var i = 0, l = path.length; i < l; i++) {\n    var n = path[i];\n    var nextEl = colElsMap[n.loc.start.line][n.loc.start.column];\n    var col = n.loc.start.column;\n    var startLine = n.loc.start.line;\n    var line = startLine;\n    var endLine = n.loc.end.line;\n    var endCol = n.loc.end.column;\n    while (nextEl && line <= endLine &&\n            !(line === endLine && col >= endCol)) {\n      if (line !== startLine && line !== endLine) {\n        var lineEl = parentByClass(nextEl, \'loc\');\n        lineEl.classList.add(n.type);\n        line++;\n        col = 0;\n      } else {\n        nextEl.classList.add(n.type);\n        col++;\n      }\n      var lineOfCols = colElsMap[line];\n      var tmpEl = lineOfCols && lineOfCols[col];\n      if (tmpEl) {\n        nextEl = tmpEl;\n      } else {\n        line++;\n      }\n    }\n  }\n}\n\n/**\n * Split highlighted line of code into columns.\n * @param {DOMElement} lineEl\n * @return {array<DOMElement>} array of consequitive column elements.\n */\nfunction columnify(lineEl) {\n  var colEls = [];\n\n  // Pull out leaf text elements.\n  var textEls = [];\n  var stack = [lineEl];\n  var el;\n  while ((el = stack.pop()) != null) {\n    if (el.nodeType === 3) {\n      textEls.push(el);\n    } else {\n      stack.push.apply(\n        stack,\n        [].slice.call(el.childNodes).reverse()\n      );\n    }\n  }\n\n  var col = 0;\n  while((el = textEls.shift()) != null) {\n    var chars = el.textContent.split(\'\');\n    for (var i = 0; i < chars.length; i++) {\n      var span = document.createElement(\'span\');\n      span.classList.add(\'col-\' + col);\n      span.textContent = chars[i];\n      colEls.push(span);\n      col++;\n      el.parentNode.insertBefore(span, el);\n    }\n    el.parentNode.removeChild(el);\n  }\n\n  return colEls;\n}\n\n/**\n * Creates a line element.\n * @param {number} lineno\n * @param {string} html\n * @return {DOMElement}\n */\nfunction createLineEl(lineno, html) {\n  var div = document.createElement(\'div\');\n  div.classList.add(\'loc\');\n  div.classList.add(\'loc-\' + lineno);\n  div.innerHTML = html;\n  return div;\n}\n\n/**\n * Format code by highlighting, annotating and columnifying.\n * @param {string} code\n * @param {array<ASTNode>} path\n */\nmodule.exports = function (code, path) {\n  var html = highlight(code);\n  var colElMap = {};\n  var codeEl = document.createElement(\'code\');\n  codeEl.classList.add(langClass);\n\n  var lines = html.split(\'\\n\');\n  var line;\n  var n = 1;\n  while ((line = lines.shift()) != null) {\n    var lineEl = createLineEl(n, line || \'&nbsp;\');\n    colElMap[n] = columnify(lineEl);\n    codeEl.appendChild(lineEl);\n    n++;\n  }\n\n  annotate(path, colElMap);\n\n  var preEl = document.createElement(\'pre\');\n  preEl.classList.add(langClass);\n  preEl.appendChild(codeEl);\n  return preEl;\n};\n';
